{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\projects\\\\JobsApp\\\\JobsApp\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { environment } from './../../environments/environment';\nimport { getPaginatedResult, getPaginationParams } from './paginationHelper';\nimport { BehaviorSubject, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n\n  createHubConnection(user, otherUsername) {\n    this.hubConnection = new HubConnectionBuilder().withUrl(`${this.hubUrl}message?user=${otherUsername}`, {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(err => console.log(err));\n    this.hubConnection.on('ReceiveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('NewMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    let params = getPaginationParams(pageNumber, pageSize);\n    params = params.append('container', container);\n    return getPaginatedResult(`${this.baseUrl}messages`, params, this.http);\n  }\n\n  getMessageThread(username) {\n    return this.http.get(`${this.baseUrl}messages/thread/${username}`);\n  }\n\n  sendMessage(username, content) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const createMessgae = {\n        recipientUsername: username,\n        content: content\n      };\n      return _this.hubConnection.invoke('SendMessage', createMessgae).catch(err => console.log(err));\n    })();\n  }\n\n  deleteMessage(id) {\n    return this.http.delete(`${this.baseUrl}messages/${id}`);\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/projects/JobsApp/JobsApp/Client/src/app/services/Message.service.ts"],"names":["HubConnectionBuilder","environment","getPaginatedResult","getPaginationParams","BehaviorSubject","take","i0","i1","MessageService","constructor","http","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","createHubConnection","user","otherUsername","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","err","console","log","on","messages","next","message","pipe","subscribe","stopHubConnection","stop","getMessages","pageNumber","pageSize","container","params","append","getMessageThread","username","get","sendMessage","content","createMessgae","recipientUsername","invoke","deleteMessage","id","delete","ɵfac","MessageService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { environment } from './../../environments/environment';\r\nimport { getPaginatedResult, getPaginationParams } from './paginationHelper';\r\nimport { BehaviorSubject, take } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class MessageService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseUrl = environment.apiUrl;\r\n        this.hubUrl = environment.hubUrl;\r\n        this.messageThreadSource = new BehaviorSubject([]);\r\n        this.messageThread$ = this.messageThreadSource.asObservable();\r\n    }\r\n    createHubConnection(user, otherUsername) {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(`${this.hubUrl}message?user=${otherUsername}`, { accessTokenFactory: () => user.token })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n        this.hubConnection.start().catch(err => console.log(err));\r\n        this.hubConnection.on('ReceiveMessageThread', messages => {\r\n            this.messageThreadSource.next(messages);\r\n        });\r\n        this.hubConnection.on('NewMessage', message => {\r\n            this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n                this.messageThreadSource.next([...messages, message]);\r\n            });\r\n        });\r\n    }\r\n    stopHubConnection() {\r\n        if (this.hubConnection) {\r\n            this.hubConnection.stop();\r\n        }\r\n    }\r\n    getMessages(pageNumber, pageSize, container) {\r\n        let params = getPaginationParams(pageNumber, pageSize);\r\n        params = params.append('container', container);\r\n        return getPaginatedResult(`${this.baseUrl}messages`, params, this.http);\r\n    }\r\n    getMessageThread(username) {\r\n        return this.http.get(`${this.baseUrl}messages/thread/${username}`);\r\n    }\r\n    async sendMessage(username, content) {\r\n        const createMessgae = { recipientUsername: username, content: content };\r\n        return this.hubConnection.invoke('SendMessage', createMessgae)\r\n            .catch(err => console.log(err));\r\n    }\r\n    deleteMessage(id) {\r\n        return this.http.delete(`${this.baseUrl}messages/${id}`);\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}